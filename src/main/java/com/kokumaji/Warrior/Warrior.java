/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.kokumaji.Warrior;

import java.io.File;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.kokumaji.Warrior.Commands.Game.ArenaCommand;
import com.kokumaji.Warrior.Commands.Game.KitCommand;
import com.kokumaji.Warrior.Commands.General.MainCommand;
import com.kokumaji.Warrior.Game.Listeners.ChatListener;
import com.kokumaji.Warrior.Game.Listeners.PlayerListener;
import com.kokumaji.Warrior.Game.Managers.ArenaManager;
import com.kokumaji.Warrior.Game.Managers.KitManager;
import com.kokumaji.Warrior.Game.Managers.MOTDManager;
import com.kokumaji.Warrior.Game.Objects.GUIs.GUIHandler;
import com.kokumaji.Warrior.Game.Managers.LobbyManager;
import com.kokumaji.Warrior.Utils.*;

import me.kokumaji.HibiscusAPI.api.translation.Translator;
import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandMap;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.logging.Logger;

public class Warrior extends JavaPlugin {

    public static ExecutorService pool = Executors.newFixedThreadPool(3);
    private static List<Command> cmds = new ArrayList<Command>();
    private CommandMap cMap;

    NMSUtil nmsUtil;
    static Translator translator;
    DatabaseUtil sqlUtil;
    LobbyManager lobbyManager;
    MOTDManager motdManager;
    private FileConfiguration c;
    private boolean usePlaceholderAPI;

    @Override
    public void onEnable() {

        ConfigUtil.CopyConfig(false);
        c = ConfigUtil.GetConfig(ConfigUtil.ConfigType.SETTINGS);

        try {
            String placeholderProvider = c.getString("use-modules.placeholder-manager");
            if(placeholderProvider.equals("papi")) {
                if(Bukkit.getPluginManager().getPlugin("PlaceholderAPI") != null) {
                    new PlaceholderExpansion(this).register();
                    usePlaceholderAPI = true;
                }
            }

            if(placeholderProvider.equals("native") || placeholderProvider.equals("both")) {
                translator = new Translator(this, c, true);
                Translator.registerReplacer(new Placeholders("warrior"));
            }

            nmsUtil = new NMSUtil();
            lobbyManager = new LobbyManager(this);

        } catch (Exception e) {
            e.printStackTrace();
        }

        this.getCommandMap();
        
        cmds.add(new MainCommand("warrior", this));
        cmds.add(new ArenaCommand("arena", this));
        cmds.add(new KitCommand("kit", this));
        cMap.registerAll(this.getName().toLowerCase(), cmds);
        Bukkit.getServer().getPluginManager().registerEvents(new PlayerListener(), this);
        Bukkit.getServer().getPluginManager().registerEvents(new ChatListener(), this);

        ArenaManager.LoadArenas();
        KitManager.RegisterKits();

        File npcFolder = new File(getDataFolder(), "npcdata");
        if(!npcFolder.exists())
            npcFolder.mkdirs();

        if(c.getBoolean("chat-settings.send-motd")) {
            motdManager = new MOTDManager(c, this);
        }

        GUIHandler.RegisterGUIs();

        String dataType = c.getString("data-storage.storage-method");
        if(dataType.toLowerCase().equalsIgnoreCase("mysql")) {
            sqlUtil = new DatabaseUtil(c);
            sqlUtil.MakeTables();
        } else if(dataType.toLowerCase().equalsIgnoreCase("h2") || dataType.toLowerCase().equalsIgnoreCase("flatfile")) {
            InternalMessages.STORAGE_TYPE_NOT_IMPLEMENTED.Log(dataType);
        } else {
            InternalMessages.STORAGE_TYPE_INVALID.Log(dataType);
        }

    }

    protected void getCommandMap() {
        Field f;
        try {
            f = Bukkit.getServer().getClass().getDeclaredField("commandMap");
            f.setAccessible(true);
            cMap = (CommandMap) f.get(Bukkit.getServer());
        } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {
            e.printStackTrace();
        }
    }

    public static Translator getTranslator() {
        return translator;
    }

    public Object GetUtil(String s) {
        if(s.contains("nms")) return nmsUtil;
        if(s.contains("sql")) return sqlUtil;
        return null;
    }

    public Object GetManager(String s) {
        if(s.contains("lobby")) return lobbyManager;
        if(s.contains("motd")) return motdManager;
        return null;
    }

    public static Plugin GetPlugin() {
        return getPlugin(Warrior.class);
    }

    public static Logger GetLogger() {
        return GetPlugin().getLogger();
    }

    public boolean UsePAPI() {
        return usePlaceholderAPI;
    }
}